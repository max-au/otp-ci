stages:
  - build
  - test

variables:
  # Ubuntu docker image
  UBUNTU_IMAGE: $CI_REGISTRY/erlang/otp/ubuntu-base
  UBUNTU_IMAGE_ARM64: $CI_REGISTRY/erlang/otp/ubuntu-base-arm64
  # Ubuntu docker image with all OTP dependencies

base-image-ubuntu-x86:
  stage: build
  when: manual
  image: docker:stable
  tags:
    - linux
  services:
    - docker:dind
  script:
    - |
      echo "
      FROM ubuntu
      ENV DEBIAN_FRONTEND=noninteractive
      ENV LANG=C.UTF-8
      ENV LC_ALL=C.UTF-8
      RUN apt-get update && apt-get -y upgrade && apt-get install -y build-essential m4 autoconf fop xsltproc clang clang-format default-jdk libxml2-utils zlib1g-dev libncurses5-dev libssl-dev unixodbc-dev libgmp3-dev libwxbase3.0-dev libwxgtk3.0-gtk3-dev libwxgtk-webview3.0-gtk3-dev libsctp-dev lksctp-tools
      RUN update-alternatives --set wx-config /usr/lib/x86_64-linux-gnu/wx/config/gtk3-unicode-3.0" >  Dockerfile
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $UBUNTU_IMAGE:latest .
    - docker push $UBUNTU_IMAGE:latest

base-image-ubuntu-arm64:
  stage: build
  when: manual
  image: docker:stable
  tags:
    - linux-arm64
  services:
    - docker:dind
  script:
    - |
      echo "
      FROM arm64v8/ubuntu
      ENV DEBIAN_FRONTEND=noninteractive
      ENV LANG=C.UTF-8
      ENV LC_ALL=C.UTF-8
      RUN apt-get update && apt-get -y upgrade && apt-get install -y build-essential m4 autoconf fop xsltproc clang clang-format default-jdk libxml2-utils zlib1g-dev libncurses5-dev libssl-dev unixodbc-dev libgmp3-dev libwxbase3.0-dev libwxgtk3.0-gtk3-dev libwxgtk-webview3.0-gtk3-dev libsctp-dev lksctp-tools
      RUN update-alternatives --set wx-config /usr/lib/x86_64-linux-gnu/wx/config/gtk3-unicode-3.0" >  Dockerfile
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --platform linux/arm64/v8 -t $UBUNTU_IMAGE_ARM64:latest .
    - docker push $UBUNTU_IMAGE_ARM64:latest

build-ubuntu:
  when: manual
  image: $UBUNTU_IMAGE:latest
  tags:
    - linux
  stage: build
  script:
    - export MAKEFLAGS="-j$(($(nproc) + 2))" ERLC_USE_SERVER=yes CC=clang CXX=clang++ CFLAGS="-O2 -g -Werror"
    - export ERL_TOP=`pwd`
    # install OTP into release/otp
    - ./configure --with-ssl --with-ssl-lib-subdir=lib/x86_64-linux-gnu --prefix=$ERL_TOP/release/otp
    - make
    # Disable -Werror as testcases do not compile with it on
    - export CFLAGS="-O2 -g"
    - make tests
    - make install
    - cd release/tests/test_server
    - $ERL_TOP/release/otp/bin/erl -noshell -eval "ts:install(),erlang:halt()."
  artifacts:
    paths:
      - "release/"
    expire_in: 1 week

static-analysis-ubuntu:
  when: manual
  tags:
    - linux
  needs:
    - build-ubuntu
  image: $UBUNTU_IMAGE:latest
  stage: test
  script:
    - export MAKEFLAGS="-j$(($(nproc) + 2))" ERLC_USE_SERVER=yes CC=clang CXX=clang++ CFLAGS="-O2 -g"
    - export ERL_TOP=`pwd`
    - echo "Running dialyzer"
    - scripts/run-dialyzer
    - echo "Releasing documentation"
    # make docs does not work without all the prebuilt files everywhere
    - ./configure --with-ssl --with-ssl-lib-subdir=lib/x86_64-linux-gnu --prefix=$ERL_TOP/release/otp
    - make
    - make docs DOC_TARGETS='chunks man html'
    - make install-docs
    - echo "Running xmllint"
    - make xmllint
    - echo "HTML link checks"
    - scripts/otp_html_check $ERL_TOP/release/otp/lib/erlang doc/index.html

test-ubuntu-emulator:
  when: manual
  tags:
    - linux
  dependencies:
    - build-ubuntu
  image: $UBUNTU_IMAGE:latest
  stage: test
  script:
    # Do not set -Werror, or tests will fail in hardly debuggable way
    - export MAKEFLAGS="-j$(($(nproc) + 2))" ERLC_USE_SERVER=yes CC=clang CXX=clang++ CFLAGS="-O2 -g"
    - export ERL_TOP=`pwd`
    - cd release/tests/test_server
    - $ERL_TOP/release/otp/bin/ct_run -dir $ERL_TOP/release/tests/emulator_test -ct_hooks cth_surefire [] -noshell -pa $ERL_TOP/release/tests/test_server
  artifacts:
    when: always
    paths:
      - release/tests/test_server/**
    reports:
      junit:
        - release/tests/test_server/ct_run.*/junit_report.xml
    expire_in: 1 week

# This job is designed to be executed for Continuous Runs, testing all applications
test-ubuntu-libs:
  when: manual
  tags:
    - linux
  dependencies:
    - build-ubuntu
  image: $UBUNTU_IMAGE:latest
  stage: test
  parallel:
    matrix:
      - OS: [ubuntu20]
        APP: [asn1, common_test, compiler, crypto, debugger, dialyzer,
              diameter, edoc, eldap, erl_docgen, erl_interface, et,
              eunit, ftp, inets, jinterface, kernel, megaco,
              mnesia, observer, odbc, os_mon, parsetools, public_key,
              reltool, runtime_tools, sasl, snmp, ssh, ssl, stdlib,
              syntax_tools, tftp, tools, wx, xmerl]
  script:
    # Do not set -Werror, or tests will fail in hardly debuggable way
    - export MAKEFLAGS="-j$(($(nproc) + 2))" ERLC_USE_SERVER=yes CC=clang CXX=clang++ CFLAGS="-O2 -g"
    - export ERL_TOP=`pwd`
    - cd release/tests/test_server
    - $ERL_TOP/release/otp/bin/ct_run -dir $ERL_TOP/release/tests/${APP}_test -ct_hooks cth_surefire [] -noshell -pa $ERL_TOP/release/tests/test_server
  artifacts:
    when: always
    paths:
        - release/tests/test_server/**
    reports:
      junit:
        - release/tests/test_server/ct_run.*/junit_report.xml
    expire_in: 1 week

build-freebsd:
  when: manual
  tags:
    - freebsd
  stage: build
  script:
    - export MAKEFLAGS="-j `sysctl hw.ncpu|awk '{print $2}'`"
    - export ERLC_USE_SERVER=yes ERL_TOP=`pwd`
    # -Werror breaks FreeBSD13 compilation
    - export CC=clang CXX=clang++ CFLAGS="-O2 -g"
    - ./configure --prefix=$ERL_TOP/release/otp
    - gmake
    - gmake tests
    - gmake install
    - cd release/tests/test_server
    - $ERL_TOP/release/otp/bin/erl -noshell -eval "ts:install(),erlang:halt()."
  artifacts:
    paths:
      - "release/"
    expire_in: 1 week

test-freebsd-emulator:
  when: manual
  tags:
    - freebsd
  stage: test
  dependencies:
    - build-freebsd
  script:
    - export ERLC_USE_SERVER=yes ERL_TOP=`pwd`
    # -Werror breaks all tests compilation due to warnings
    - export CC=clang CXX=clang++ CFLAGS="-O2 -g"
    - cd release/tests/test_server
    - $ERL_TOP/release/otp/bin/ct_run -dir $ERL_TOP/release/tests/emulator_test -ct_hooks cth_surefire [] -noshell -pa $ERL_TOP/release/tests/test_server
  artifacts:
    when: always
    paths:
      - release/tests/test_server/**
    reports:
      junit:
        - release/tests/test_server/ct_run.*/junit_report.xml
    expire_in: 1 week

# This job is designed to be executed for Continuous Runs, testing all applications
test-freebsd-libs:
  when: manual
  tags:
    - freebsd
  dependencies:
    - build-freebsd
  stage: test
  parallel:
    matrix:
      - OS: [freebsd]
        APP: [crypto, kernel, ssl, stdlib]
  script:
    - export ERLC_USE_SERVER=yes ERL_TOP=`pwd`
    # -Werror breaks all tests compilation due to warnings
    - export CC=clang CXX=clang++ CFLAGS="-O2 -g"
    - cd release/tests/test_server
    - ERL_FLAGS="-noshell -pa $ERL_TOP/release/tests/test_server" $ERL_TOP/release/otp/bin/ct_run -dir $ERL_TOP/release/tests/${APP}_test -ct_hooks cth_surefire []
  artifacts:
    when: always
    paths:
      - release/tests/test_server/**
    reports:
      junit:
        - release/tests/test_server/ct_run.*/junit_report.xml
    expire_in: 1 week